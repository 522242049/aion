allprojects { 
    apply plugin: 'java'

    repositories {
        jcenter()

        flatDir {
            dirs './lib'
        }
    }
}

subprojects {
    sourceSets { 
        main {
            java {
                srcDirs = ['src']
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
        }
    }

    task copyJarToAionMod(type: Copy) { 
        task -> from "build/libs/${task.project.name}.jar"
        into file("../mod")
    }

    task deleteJarFromAionMod(type: Delete) { 
        task -> delete "../mod/${task.project.name}.jar"
    }

    task copyNativeLibsForModuleTests(type: Copy) { 
        from '../native'
        into file('./native')
    }

    task deleteNativeLibs(type: Delete) {
        task -> delete 'native'
    }

    build.dependsOn copyJarToAionMod
    clean.dependsOn deleteJarFromAionMod

    afterEvaluate { 
        // Override java plug-in behaviour to make JDK9+ module logic work
        // From: https://guides.gradle.org/building-java-9-modules/#step_2_produce_java_9_modules_for_all_subprojects
        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }
        
        // Need to comment this out for now, modules-info.java doesn't have 'require' declarations
        // used by the test code.  The ant build.xml, similarly, uses module-path for build, but 
        // classpath for building the tests (at least in modRlp).  Need to sort out how to properly set the module-path
        // for the tests before using the stuff below.
        /*
        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'junit',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
        */
    }
}

// import ant build.xml into gradle world -- this can help us 
// migrate over time
ant.importBuild('build.xml') { antTargetName -> 'ant-' + antTargetName }

// referencing the ant values for now; once everything is working,
// use the constants instead
def dirBuildFile = ant.properties['dir.buildfile'] // = "./build/main"
def dirBuildNative = ant.properties['dir.build.native'] // = "./build/main/native"
def dirNative = ant.properties['dir.native'] // = "./native"
def dirWorkspace = ant.properties['dir.workspace'] // = "./"
def dirPack = ant.properties['dir.pack'] // = ""
def dirLibFile = ant.properties['dir.libfile'] // = ""
def dirModFile = ant.properties['dir.modfile']  // ="./mod"
def javaHome = "$System.env.JAVA_HOME"

task compileNative(type:Exec) {
    doFirst { 
        mkdir "${dirBuildFile}"
        mkdir "${dirNative}/linux/equihash"
        mkdir "${dirNative}/linux/equihash"
        mkdir "${dirBuildNative}/linux/equihash"
        ant.copy(includeemptydirs: "false", todir: "./build/native") {
            fileset(dir: "./modAionImpl/src/org/aion/equihash/native")
        }
        ant.copy(includeemptydirs: "false", todir: "./build/native") {
            fileset(dir: "./modAionImpl/build/native")
        }
    }
    commandLine "g++", 
        "-fPIC", 
        "-shared", 
        "-I${javaHome}/include", 
        "-I${javaHome}/include/linux", 
        "-I${dirBuildNative}", 
        "-I${dirNative}/linux/sodium", 
        "-mtune=generic", 
        "-m64", 
        "-std=c++11", 
        "-Wall", 
        "-Wno-deprecated-declarations", 
        "-D_POSIX_C_SOURCE=200112L", 
        "-O3", 
        "./build/native/equi.h", 
        "./build/native/equi_miner.h", 
        "./build/native/equiMiner.cpp", 
        "-L${dirWorkspace}/native/linux/sodium", 
        "-lsodium", 
        "-o", 
        "${dirNative}/linux/equihash/equiMiner.so", 
        "-Wl,-rpath,${dirNative}/linux/sodium"
    def stdout = new ByteArrayOutputStream()
    ext.output = {
        return stdout.toString()
    }
}

project.build.dependsOn("ant-3rd_build")

project(':modAionImpl') { 
    build.finalizedBy(compileNative)
}

def prefix = 'aion'

task pack(type: Tar) { 
    destinationDir = file('pack')
    baseName = 'aion'

    /*from("${dirLibFile}") { 
        include "*.jar"
        include "*.so"
        exclude 'byte-buddy-*.jar', '
        into prefix
    }*/
}

build.finalizedBy(pack)

/*
 3rd_build 							ANT
 build                              OK
 build_test
 ci_build
 ci_test_modules
 ci_test_modules_collect_reports
 clean
 clean_build
 clean_fullbuild
 fastbuild
 full_build
 logenv
 mod_build							ANT
 pack
 pack_build
 pack_dev_docker
 pack_docker
 pre_build
 sourcebuild
 test
 test_modules
 test_modules_collect_reports
 */
