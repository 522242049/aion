package org.aion.types;

import org.aion.base.type.Address;
import org.aion.base.util.ByteUtil;
import org.aion.crypto.ECKey;
import org.aion.mcf.core.ImportResult;
import org.aion.zero.impl.StandaloneBlockchain;
import org.aion.zero.impl.types.AionBlock;
import org.aion.zero.impl.types.AionTxInfo;
import org.aion.zero.types.AionTransaction;
import org.junit.Test;

import java.math.BigInteger;
import java.util.Collections;

import static com.google.common.truth.Truth.assertThat;

/**
 * Test suite to cover:
 * https://github.com/aionnetwork/aion/issues/703
 */
public class AugustIntegrationTest {

    private static final String passingBinarySol = "0x605060405234156100105760006000fd5b5b6000600060006000506000600063ffffffff16815260100190815260100160002090506000509150816000016000508054806001018281610052919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280600763ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055505050508160000160005080548060010182816100d0919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280600963ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555050505060006000506000600163ffffffff16815260100190815260100160002090506000509050806000016000508054806001018281610172919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280601163ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055505050508060000160005080548060010182816101f0919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280601363ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055505050505b50506102c6565b815481835581811511610286578183600052601060002090509182019101610285919061028b565b5b505050565b6102c39190610295565b808211156102bf5760006000820160006101000a81549063ffffffff021916905550600101610295565b5090565b90565b61038b806102d56000396000f30060506040526000356c01000000000000000000000000900463ffffffff168063410d59cc146100335761002d565b60006000fd5b341561003f5760006000fd5b61004761009f565b6040518080601001828103825283818151815260100191508051906010019060100280838360005b8381101561008b5780820151818401525b60108101905061006f565b505050509050019250505060405180910390f35b6100a7610348565b60006000600060006100b7610348565b60006000506000600063ffffffff168152601001908152601001600020905060005060000160005060008154811015156100ed57fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16945060006000506000600063ffffffff1681526010019081526010016000209050600050600001600050600181548110151561015457fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16935060006000506000600163ffffffff168152601001908152601001600020905060005060000160005060008154811015156101bb57fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16925060006000506000600163ffffffff1681526010019081526010016000209050600050600001600050600181548110151561022257fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16915060046040518059106102625750595b908082528060100260100182016040528015610279575b5090508481600081518110151561028c57fe5b9060100190601002019063ffffffff16908163ffffffff1681526010015050838160018151811015156102bb57fe5b9060100190601002019063ffffffff16908163ffffffff1681526010015050828160028151811015156102ea57fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508181600381518110151561031957fe5b9060100190601002019063ffffffff16908163ffffffff1681526010015050809550610340565b505050505090565b6010604051908101604052806000815260100150905600a165627a7a72305820f03c82aca6afb1a3a09d3b7fe59bc7edee7df57af2f887ec2524470ae80900090029";
    private static final String failingBinarySol = "0x605060405234156100105760006000fd5b5b6000600060006000506000600063ffffffff16815260100190815260100160002090506000509150816000016000508054806001018281610052919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280600763ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055505050508160000160005080548060010182816100d0919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280600963ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555050505060006000506000600163ffffffff16815260100190815260100160002090506000509050806000016000508054806001018281610172919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280601163ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055505050508060000160005080548060010182816101f0919061025d565b9190906000526010600020905090600191828204019190066010025b601060405190810160405280601363ffffffff16815260100150909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055505050505b50506102c6565b815481835581811511610286578183600052601060002090509182019101610285919061028b565b5b505050565b6102c39190610295565b808211156102bf5760006000820160006101000a81549063ffffffff021916905550600101610295565b5090565b90565b6106ab806102d56000396000f30060506040526000356c01000000000000000000000000900463ffffffff168063410d59cc1461003e578063b8819bdc146100aa57610038565b60006000fd5b341561004a5760006000fd5b610052610116565b6040518080601001828103825283818151815260100191508051906010019060100280838360005b838110156100965780820151818401525b60108101905061007a565b505050509050019250505060405180910390f35b34156100b65760006000fd5b6100be6103bf565b6040518080601001828103825283818151815260100191508051906010019060100280838360005b838110156101025780820151818401525b6010810190506100e6565b505050509050019250505060405180910390f35b61011e610668565b600060006000600061012e610668565b60006000506000600063ffffffff1681526010019081526010016000209050600050600001600050600081548110151561016457fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16945060006000506000600063ffffffff168152601001908152601001600020905060005060000160005060018154811015156101cb57fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16935060006000506000600163ffffffff1681526010019081526010016000209050600050600001600050600081548110151561023257fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16925060006000506000600163ffffffff1681526010019081526010016000209050600050600001600050600181548110151561029957fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16915060046040518059106102d95750595b9080825280601002601001820160405280156102f0575b5090508481600081518110151561030357fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508381600181518110151561033257fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508281600281518110151561036157fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508181600381518110151561039057fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508095506103b7565b505050505090565b6103c7610668565b60006000600060006103d7610668565b60006000506000600063ffffffff1681526010019081526010016000209050600050600001600050600081548110151561040d57fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16945060006000506000600063ffffffff1681526010019081526010016000209050600050600001600050600181548110151561047457fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16935060006000506000600163ffffffff168152601001908152601001600020905060005060000160005060008154811015156104db57fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16925060006000506000600163ffffffff1681526010019081526010016000209050600050600001600050600181548110151561054257fe5b906000526010600020905090600191828204019190066010025b5060000160009054906101000a900463ffffffff16915060046040518059106105825750595b908082528060100260100182016040528015610599575b509050848160008151811015156105ac57fe5b9060100190601002019063ffffffff16908163ffffffff1681526010015050838160018151811015156105db57fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508281600281518110151561060a57fe5b9060100190601002019063ffffffff16908163ffffffff16815260100150508181600381518110151561063957fe5b9060100190601002019063ffffffff16908163ffffffff1681526010015050809550610660565b505050505090565b6010604051908101604052806000815260100150905600a165627a7a7230582068cae4786519b4fb189b55fe4a75307b24e69b11e7d086fd06bd0133fa9a26530029";

    @Test
    @SuppressWarnings("Duplicates")
    public void testAugustContractPassingTest() {
        StandaloneBlockchain.Bundle bundle = new StandaloneBlockchain.Builder()
                .withValidatorConfiguration("simple")
                .withDefaultAccounts()
                .build();

        ECKey key = bundle.privateKeys.get(0);
        StandaloneBlockchain bc = bundle.bc;
        BigInteger nonce = BigInteger.ZERO;

        AionTransaction tx = new AionTransaction(
                nonce.toByteArray(),
                null,
                BigInteger.ZERO.toByteArray(),
                ByteUtil.hexStringToBytes(passingBinarySol),
                1_000_000L,
                1
        );
        tx.sign(key);
        AionBlock block = bc.createNewBlock(bc.getBestBlock(), Collections.singletonList(tx), true);

        assertThat(block.getTransactionsList().size()).isEqualTo(1);
        ImportResult result = bc.tryToConnect(block);
        assertThat(result.isBest()).isTrue();

        AionTxInfo txInfo = bc.getTransactionInfo(tx.getHash());
        assertThat(txInfo.getReceipt().getError()).isEmpty();

        // check state
        Address contractAddr = txInfo.getReceipt().getTransaction().getContractAddress();

        // check that contract was atleast properly deployed
        assertThat(bc.getRepository().getCode(contractAddr).length).isGreaterThan(0);
    }

    @Test
    @SuppressWarnings("Duplicates")
    public void testAugustContractFailingTest() {
        StandaloneBlockchain.Bundle bundle = new StandaloneBlockchain.Builder()
                .withValidatorConfiguration("simple")
                .withDefaultAccounts()
                .build();

        ECKey key = bundle.privateKeys.get(0);
        StandaloneBlockchain bc = bundle.bc;
        BigInteger nonce = BigInteger.ZERO;

        AionTransaction tx = new AionTransaction(
                nonce.toByteArray(),
                null,
                BigInteger.ZERO.toByteArray(),
                ByteUtil.hexStringToBytes(failingBinarySol),
                1_000_000L,
                1
        );
        tx.sign(key);
        AionBlock block = bc.createNewBlock(bc.getBestBlock(), Collections.singletonList(tx), true);

        assertThat(block.getTransactionsList().size()).isEqualTo(1);
        ImportResult result = bc.tryToConnect(block);
        assertThat(result.isBest()).isTrue();

        AionTxInfo txInfo = bc.getTransactionInfo(tx.getHash());
        assertThat(txInfo.getReceipt().getError()).isEmpty();

        // check state
        Address contractAddr = txInfo.getReceipt().getTransaction().getContractAddress();

        // check that contract was atleast properly deployed
        assertThat(bc.getRepository().getCode(contractAddr).length).isGreaterThan(0);
    }
}
